package cn.edu.zua.manage.gen.dao.mapper;

import cn.edu.zua.manage.gen.entity.domain.StudentDO;
import cn.edu.zua.manage.gen.entity.domain.StudentDOExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface StudentDOMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @SelectProvider(type=StudentDOSqlProvider.class, method="countByExample")
    long countByExample(StudentDOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @DeleteProvider(type=StudentDOSqlProvider.class, method="deleteByExample")
    int deleteByExample(StudentDOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @Delete({
        "delete from test_student",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @Insert({
        "insert into test_student (id, user_name, ",
        "age, t_date, t_time, ",
        "t_datetime, sex)",
        "values (#{id,jdbcType=BIGINT}, #{userName,jdbcType=CHAR}, ",
        "#{age,jdbcType=TINYINT}, #{date,jdbcType=DATE}, #{time,jdbcType=TIME}, ",
        "#{datetime,jdbcType=TIMESTAMP}, #{sex,jdbcType=TINYINT})"
    })
    int insert(StudentDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @InsertProvider(type=StudentDOSqlProvider.class, method="insertSelective")
    int insertSelective(StudentDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @SelectProvider(type=StudentDOSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_name", property="userName", jdbcType=JdbcType.CHAR),
        @Result(column="age", property="age", jdbcType=JdbcType.TINYINT),
        @Result(column="t_date", property="date", jdbcType=JdbcType.DATE),
        @Result(column="t_time", property="time", jdbcType=JdbcType.TIME),
        @Result(column="t_datetime", property="datetime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="sex", property="sex", jdbcType=JdbcType.TINYINT)
    })
    List<StudentDO> selectByExample(StudentDOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @Select({
        "select",
        "id, user_name, age, t_date, t_time, t_datetime, sex",
        "from test_student",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_name", property="userName", jdbcType=JdbcType.CHAR),
        @Result(column="age", property="age", jdbcType=JdbcType.TINYINT),
        @Result(column="t_date", property="date", jdbcType=JdbcType.DATE),
        @Result(column="t_time", property="time", jdbcType=JdbcType.TIME),
        @Result(column="t_datetime", property="datetime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="sex", property="sex", jdbcType=JdbcType.TINYINT)
    })
    StudentDO selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @UpdateProvider(type=StudentDOSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") StudentDO record, @Param("example") StudentDOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @UpdateProvider(type=StudentDOSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") StudentDO record, @Param("example") StudentDOExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @UpdateProvider(type=StudentDOSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(StudentDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test_student
     *
     * @mbg.generated 2018-06-19 15:57:18
     */
    @Update({
        "update test_student",
        "set user_name = #{userName,jdbcType=CHAR},",
          "age = #{age,jdbcType=TINYINT},",
          "t_date = #{date,jdbcType=DATE},",
          "t_time = #{time,jdbcType=TIME},",
          "t_datetime = #{datetime,jdbcType=TIMESTAMP},",
          "sex = #{sex,jdbcType=TINYINT}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(StudentDO record);
}